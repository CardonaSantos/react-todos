{"version":3,"sources":["Components/TaskCreator.jsx","Components/TaskRow.jsx","Components/TaskTable.jsx","Components/VisionControl.jsx","App.js","index.js"],"names":["TaskCreator","_ref","CreateTask","_useState","useState","_useState2","Object","slicedToArray","NewTaskName","SetNewTask","react_default","a","createElement","onSubmit","e","preventDefault","className","onChange","target","value","type","placeholder","onClick","TaskRow","task","toggleTask","key","name","checked","done","TaskTable","doneValue","tasks","_ref$showCompleted","showCompleted","filter","map","TaskRow_TaskRow","VisionControl","isChecked","SetShowcompleted","cleanTask","window","confirm","App","taskitems","SetTaskItems","_useState3","_useState4","t","objectSpread","useEffect","datos","localStorage","getItem","JSON","parse","setItem","stringify","Components_TaskCreator","taskName","find","concat","toConsumableArray","TaskTable_TaskTable","VisionControl_VisionControl","showCompleted2","ReactDOM","createRoot","document","getElementById","render","src_App"],"mappings":"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","file":"static/js/main.69195323.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\n\r\nconst TaskCreator = ({ CreateTask }) => {\r\n\tconst [NewTaskName, SetNewTask] = useState(\"\");\r\n\r\n\t//fincion que guarda info en el nav.\r\n\tconst handleSubmit = (e) => {\r\n\t\te.preventDefault();\r\n\t\tCreateTask(NewTaskName);\r\n\r\n\t\tSetNewTask(\"\");\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<form onSubmit={handleSubmit} className='my-2 row'>\r\n\t\t\t\t<div className='col-9'>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t\tonChange={(e) => SetNewTask(e.target.value)}\r\n\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\tplaceholder='Enter a task'\r\n\t\t\t\t\t\tvalue={NewTaskName}\r\n\t\t\t\t\t\tclassName='form-control'\r\n\t\t\t\t\t/>\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className='col-3'>\r\n\t\t\t\t\t<button\r\n\t\t\t\t\t\tonClick={() => NewTaskName}\r\n\t\t\t\t\t\tclassName='btn btn-primary btn-sm'\r\n\t\t\t\t\t>\r\n\t\t\t\t\t\tSave task\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t</form>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default TaskCreator;\r\n","import React from \"react\";\r\nexport const TaskRow = ({ task, toggleTask }) => (\r\n\t<tr key={task.name}>\r\n\t\t<td className='d-flex justify-content-between'>\r\n\t\t\t{task.name}\r\n\t\t\t<input\r\n\t\t\t\ttype='checkbox'\r\n\t\t\t\tchecked={task.done}\r\n\t\t\t\tonChange={() => toggleTask(task)}\r\n\t\t\t/>\r\n\t\t</td>\r\n\t</tr>\r\n);\r\n","import { TaskRow } from \"./TaskRow\";\r\nimport React from \"react\";\r\n\r\nexport const TaskTable = ({ tasks, toggleTask, showCompleted = false }) => {\r\n\t//condicional donde mostraremos las hechas y faltantes\r\n\tconst TaskTableRows = (doneValue) => {\r\n\t\treturn tasks\r\n\t\t\t.filter((task) => task.done === doneValue)\r\n\t\t\t.map((task) => (\r\n\t\t\t\t<TaskRow task={task} key={task.name} toggleTask={toggleTask} />\r\n\t\t\t));\r\n\t};\r\n\r\n\treturn (\r\n\t\t<table className='table table-dark table-striped table-bordered border-secondary'>\r\n\t\t\t<thead>\r\n\t\t\t\t<tr className='table-success'>\r\n\t\t\t\t\t<th>Task</th>\r\n\t\t\t\t</tr>\r\n\t\t\t</thead>\r\n\t\t\t<tbody>{TaskTableRows(showCompleted)}</tbody>\r\n\t\t</table>\r\n\t);\r\n};\r\n","import React from \"react\";\r\n\r\nexport const VisionControl = ({ isChecked, SetShowcompleted, cleanTask }) => {\r\n\tconst handleDeleted = () => {\r\n\t\tif (window.confirm(\"Are you sure you want to delete\")) {\r\n\t\t\tcleanTask();\r\n\t\t}\r\n\t};\r\n\r\n\treturn (\r\n\t\t<div className='d-flex justify-content-between bg-secondary text-white text-center p-2 border-secondary'>\r\n\t\t\t<div className='form-check form-switch'>\r\n\t\t\t\t<input\r\n\t\t\t\t\tclassName='form-check-input'\r\n\t\t\t\t\tchecked={isChecked}\r\n\t\t\t\t\ttype='checkbox'\r\n\t\t\t\t\tonChange={(e) => SetShowcompleted(e.target.checked)}\r\n\t\t\t\t/>\r\n\t\t\t\t<label>Show Task Done</label>\r\n\t\t\t</div>\r\n\r\n\t\t\t<button className='btn btn-danger' onClick={handleDeleted}>\r\n\t\t\t\tClear\r\n\t\t\t</button>\r\n\t\t</div>\r\n\t);\r\n};\r\n","import \"./App.css\";\nimport React, { useState, useEffect } from \"react\";\nimport TaskCreator from \"./Components/TaskCreator\";\nimport { TaskTable } from \"./Components/TaskTable\";\nimport { VisionControl } from \"./Components/VisionControl\";\n\nfunction App() {\n\tconst [taskitems, SetTaskItems] = useState([]);\n\tconst [showCompleted, SetShowcompleted] = useState(false);\n\n\t//funcion que agrega task al mapeo. pasamos datos y verifica\n\tfunction CreateTask(taskName) {\n\t\tif (!taskitems.find((task) => task.name === taskName)) {\n\t\t\tSetTaskItems([...taskitems, { name: taskName, done: false }]);\n\t\t}\n\t}\n\n\t//funcion que actualiza las tareas\n\tconst toggleTask = (task) => {\n\t\tSetTaskItems(\n\t\t\ttaskitems.map((t) => (t.name === task.name ? { ...t, done: !t.done } : t))\n\t\t);\n\t};\n\n\t//cuando cargue la app, no borre datos.\n\tuseEffect(() => {\n\t\tlet datos = localStorage.getItem(\"task\");\n\n\t\tif (datos) {\n\t\t\tSetTaskItems(JSON.parse(datos));\n\t\t}\n\t}, []);\n\n\t//Guardar task\n\tuseEffect(() => {\n\t\tlocalStorage.setItem(\"task\", JSON.stringify(taskitems));\n\t}, [taskitems]);\n\n\t//Show y Hide tasks done\n\n\t//Deleted Tasks\n\tconst cleanTask = () => {\n\t\tSetTaskItems(taskitems.filter((task) => !task.done));\n\t\tSetShowcompleted(false);\n\t};\n\n\treturn (\n\t\t<main className='bg-dark vh-100 text-white'>\n\t\t\t<div className='container p-4 col-md-4 offset-md-4'>\n\t\t\t\t<h1>React App TODOS</h1>\n\t\t\t\t<TaskCreator CreateTask={CreateTask} />\n\t\t\t\t<TaskTable tasks={taskitems} toggleTask={toggleTask} />\n\n\t\t\t\t<VisionControl\n\t\t\t\t\tisChecked={showCompleted}\n\t\t\t\t\tSetShowcompleted={(checked) => SetShowcompleted(checked)}\n\t\t\t\t\tcleanTask={cleanTask}\n\t\t\t\t/>\n\t\t\t\t{showCompleted && (\n\t\t\t\t\t<TaskTable\n\t\t\t\t\t\ttasks={taskitems}\n\t\t\t\t\t\ttoggleTask={toggleTask}\n\t\t\t\t\t\tshowCompleted={false}\n\t\t\t\t\t\tshowCompleted2={showCompleted}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t</main>\n\t);\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom/client\";\nimport \"./index.css\";\nimport App from \"./App\";\n//tenemos que hacer las importaciones sino bostrap no funciona\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\nroot.render(<App />);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}